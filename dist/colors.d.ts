interface Colors {
    [key: string]: string;
}
export declare function createColorInstance(userColors?: Colors): {
    new (): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    fromHex(hex: string): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    fromHSL(h: number, s: number, l: number, a?: number): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    fromRGB(r: number, g: number, b: number, a?: number): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    random(): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    seededRandom(seed: string): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    resolve(input: string | {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    }): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    named(name: string): {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    };
    checkAccessible(foregroundColor: {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    }, backgroundColor: {
        hex: string;
        alpha: number;
        readonly hsl: Record<"h" | "s" | "l", number>;
        readonly hslString: string;
        readonly rgb: Record<"r" | "g" | "b", number>;
        readonly rgbString: string;
        readonly rgba: {
            a: number;
            r: number;
            g: number;
            b: number;
        };
        readonly rgbaString: string;
        readonly hsla: {
            a: number;
            h: number;
            s: number;
            l: number;
        };
        readonly hslaString: string;
        clamp(number: number): number;
        multiply(matrix: number[]): any;
        invert(value?: number): any;
        linear(slope?: number, intercept?: number): any;
        linearContrast(value?: number): any;
        linearBrightness(value?: number): any;
        sepia(value?: number): void;
        readonly contrast: number;
        readonly kelvin: number;
        readonly hexString: string;
        readonly hexStringNoAlpha: string;
        readonly hexStringNoPound: string;
        opacity(amount: number): any;
        darker(amount: number): any;
        lighter(amount: number): any;
        grayscale(): any;
        rotate(degrees: number): any;
        saturate(amount: number): any;
        desaturate(amount: number): any;
        shiftRGB(r: number, g: number, b: number): any;
        complementary(): any;
        readonly monochromatic: any[];
        readonly triadic: any[];
    }): boolean;
};
export {};
